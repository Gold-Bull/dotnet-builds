name: .NET 8 Build Steps

on:
  workflow_call:
    inputs:
      dotnet_runtime_version:
        description: 'The version of .NET Runtime to build'
        required: true
        type: string
      dotnet_sdk_version:
        description: 'The version of .NET SDK to build'
        required: true
        type: string
      architecture:
        description: 'The architecture to build for'
        required: true
        type: string

env:
  RUNTIME_OS: linux
  RUNTIME_CONFIGURATION: Release
  RUNTIME_ARCH: "${{ inputs.architecture }}"
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_VERSION_TO_BUILD: "${{ inputs.dotnet_runtime_version }}"
  DOTNET_SDK_VERSION_TO_BUILD: "${{ inputs.dotnet_sdk_version }}"
  PLATFORMS_TO_BUILD: "linux/${{ inputs.architecture }}"
  DOCKER_IMAGE_TO_USE: "ghcr.io/gold-bull/dotnet-build-deps:ubuntu-20.04-latest"

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/gold-bull/dotnet-build-deps:ubuntu-20.04-latest"
      volumes:
        - /mnt:/mnt
    defaults:
      run:
        shell: bash
    outputs:
      dotnet_version_short: ${{ steps.dotnet_runtime.outputs.dotnet_version_short }}
    env:
      WORKSPACE_CODE_DIR: "${{ github.workspace }}/dotnet"
      WORKSPACE_MNT_CODE_DIR: "/mnt/dotnet"
      WORKSPACE_MNT_PACKAGES_DIR: "/mnt/packages"
      WORKSPACE_MNT_DOWNLOADS_DIR: "/mnt/downloads"
      WORKSPACE_MNT_OUTPUT_DIR: "/mnt/output"
      WORKSPACE_MNT_OUTPUT_PACKAGES_DIR: "/mnt/output/packages"
      WORKSPACE_MNT_OUTPUT_DOTNET_DIR: "/mnt/output/dotnet"
    steps:
      - name: Create required directories
        run: |-
          mkdir -p "${WORKSPACE_MNT_CODE_DIR}"
          ln -s "${WORKSPACE_MNT_CODE_DIR}" "${WORKSPACE_CODE_DIR}"
          mkdir -p "${WORKSPACE_MNT_PACKAGES_DIR}"
          mkdir -p "${WORKSPACE_MNT_DOWNLOADS_DIR}/Runtime/${DOTNET_VERSION_TO_BUILD}"
          mkdir -p "${WORKSPACE_MNT_DOWNLOADS_DIR}/aspnetcore/Runtime/${DOTNET_VERSION_TO_BUILD}"
          mkdir -p "${WORKSPACE_MNT_DOWNLOADS_DIR}/Sdk/${DOTNET_SDK_VERSION_TO_BUILD}"

      - name: Checkout .NET repo
        uses: actions/checkout@v4
        with:
          repository: dotnet/dotnet
          submodules: true
          ref: "v${{ env.DOTNET_VERSION_TO_BUILD }}"
          path: "${{ env.WORKSPACE_CODE_DIR }}"

      - name: Build .NET Runtime
        id: dotnet_runtime
        run: |-
          echo "dotnet_version_short=${DOTNET_VERSION_TO_BUILD:0:3}" >> "$GITHUB_OUTPUT"
          
          export ROOTFS_DIR="/crossfs/${RUNTIME_ARCH}"

          echo "Disk usage before build"
          df -h

          ln -s ${WORKSPACE_MNT_OUTPUT_PACKAGES_DIR} .packages

          chmod +x ./build.sh

          ./build.sh -subset mono+libs+host+packs --cross --os ${RUNTIME_OS} --arch ${RUNTIME_ARCH} --configuration ${RUNTIME_CONFIGURATION}

          cp artifacts/packages/${RUNTIME_CONFIGURATION}/Shipping/*.nupkg ${WORKSPACE_MNT_PACKAGES_DIR}
          cp artifacts/packages/${RUNTIME_CONFIGURATION}/Shipping/*.tar.gz ${WORKSPACE_MNT_DOWNLOADS_DIR}/Runtime/${DOTNET_VERSION_TO_BUILD}

          echo "Disk usage after build"
          df -h

          ls -la "${WORKSPACE_MNT_PACKAGES_DIR}"
          ls -la "${WORKSPACE_MNT_DOWNLOADS_DIR}/Runtime/${DOTNET_VERSION_TO_BUILD}"

          echo "Disk usage after clean"
          df -h
        working-directory: "${{ env.WORKSPACE_CODE_DIR }}/src/runtime"

      - name: Build ASP.NET Core
        run: |-
          echo "Disk usage before build"
          df -h

          export PATH="/opt/nodejs_v14/bin:$PATH"
          node --version

          ln -s ${WORKSPACE_MNT_OUTPUT_PACKAGES_DIR} .packages

          chmod +x ./eng/build.sh

          mkdir -p ./artifacts/obj/Microsoft.AspNetCore.App.Runtime/
          cp "${WORKSPACE_MNT_DOWNLOADS_DIR}/Runtime/${DOTNET_VERSION_TO_BUILD}/dotnet-runtime-${DOTNET_VERSION_TO_BUILD}-${RUNTIME_OS}-${RUNTIME_ARCH}.tar.gz" ./artifacts/obj/Microsoft.AspNetCore.App.Runtime/

          ./eng/build.sh --os-name ${RUNTIME_OS} --arch ${RUNTIME_ARCH} --configuration ${RUNTIME_CONFIGURATION} --pack --no-build-java /p:OnlyPackPlatformSpecificPackages=true /p:SkipTestBuild=true /p:IgnoreYarnWarnings=true

          echo "Disk usage after build"
          df -h

          cp artifacts/packages/${RUNTIME_CONFIGURATION}/Shipping/*.nupkg ${WORKSPACE_MNT_PACKAGES_DIR}
          cp artifacts/installers/${RUNTIME_CONFIGURATION}/*.tar.gz ${WORKSPACE_MNT_DOWNLOADS_DIR}/aspnetcore/Runtime/${DOTNET_VERSION_TO_BUILD}
          cp artifacts/installers/${RUNTIME_CONFIGURATION}/aspnetcore_base_runtime.version ${WORKSPACE_MNT_DOWNLOADS_DIR}/aspnetcore/Runtime/${DOTNET_VERSION_TO_BUILD}

          echo "Disk usage after clean"
          df -h
        working-directory: "${{ env.WORKSPACE_CODE_DIR }}/src/aspnetcore"

      - name: Build SDK
        run: |-
          echo "Disk usage before build"
          df -h

          ln -s ${WORKSPACE_MNT_OUTPUT_PACKAGES_DIR} .packages

          chmod +x ./build.sh

          ./build.sh --pack --configuration ${RUNTIME_CONFIGURATION} /p:Architecture=${RUNTIME_ARCH}

          echo "Disk usage after build"
          df -h

          cp artifacts/packages/Release/NonShipping/*.zip ${WORKSPACE_MNT_DOWNLOADS_DIR}/Sdk/${DOTNET_SDK_VERSION_TO_BUILD}
          cp artifacts/packages/${SDK_CONF}/Shipping/*.nupkg ${WORKSPACE_MNT_PACKAGES_DIR}

          echo "Disk usage after clean"
          df -h
        working-directory: "${{ env.WORKSPACE_CODE_DIR }}/src/sdk"

      - name: Build Installer
        run: |-
          echo "Disk usage before build"
          df -h

          ln -s ${WORKSPACE_MNT_OUTPUT_PACKAGES_DIR} .packages

          chmod +x ./build.sh

          ./build.sh -c ${RUNTIME_CONFIGURATION} -a ${RUNTIME_ARCH} /p:HostRid=linux-x64 /p:PublicBaseURL=file://${WORKSPACE_MNT_DOWNLOADS_DIR}/

          echo "Disk usage after build"
          df -h

          cp artifacts/packages/${RUNTIME_CONFIGURATION}/Shipping/*.tar.gz ${WORKSPACE_MNT_DOWNLOADS_DIR}

          echo "Disk usage after clean"
          df -h
        working-directory: "${{ env.WORKSPACE_CODE_DIR }}/src/installer"

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: "nuget-packages-${{ env.RUNTIME_ARCH }}"
          path: "${{ env.WORKSPACE_MNT_PACKAGES_DIR }}"
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

      - name: Upload Archives
        uses: actions/upload-artifact@v4
        with:
          name: "archives-${{ env.RUNTIME_ARCH }}"
          path: "${{ env.WORKSPACE_MNT_DOWNLOADS_DIR }}"
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

      - name: Cleanup
        if: ${{ always() }}
        run: |-
          rm -rf "${WORKSPACE_CODE_DIR}"
          rm -rf "${WORKSPACE_MNT_CODE_DIR}"
          rm -rf "${WORKSPACE_MNT_PACKAGES_DIR}"
          rm -rf "${WORKSPACE_MNT_DOWNLOADS_DIR}"
          rm -rf "${WORKSPACE_MNT_OUTPUT_DIR}"


  test:
    name: "Test"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout .NET repo
        uses: actions/checkout@v4

      - id: qemu
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
  
      - id: setup_buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nuget-packages-${{ env.RUNTIME_ARCH }}
          merge-multiple: true
          path: ${{ github.workspace }}/nuget-packages
      
      - name: Build and Run tests
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS_TO_BUILD }}
          provenance: false
          context: "${{ github.workspace }}"
          file: "${{ github.workspace }}/tests/${{ needs.build.outputs.dotnet_version_short }}/simple/Dockerfile"
          push: false
          builder: ${{ steps.setup_buildx.outputs.name }}
          build-args: |
            RUNTIME_FRAMEWORK_VERSION=${{ inputs.dotnet_runtime_version }}
            DOTNET_SDK_VERSION=${{ needs.build.outputs.dotnet_version_short }}
