name: .NET 7 Build Steps

on:
  workflow_call:
    inputs:
      version:
        description: 'The version of .NET to build'
        required: true
        type: string
      architecture:
        description: 'The architecture to build for'
        required: true
        type: string

env:
  RUNTIME_OS: linux
  RUNTIME_CONFIGURATION: Release
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  RUNTIME_ARCH: "${{ inputs.architecture }}"
  PLATFORMS_TO_BUILD: "linux/${{ inputs.architecture }}"
  DOCKER_IMAGE_TO_USE: "ghcr.io/gold-bull/dotnet-build-deps:ubuntu-18.04-latest"

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      dotnet_sdk_version: ${{ steps.dotnet_runtime.outputs.dotnet_sdk_version }}
    steps:
      - name: Checkout .NET Runtime repo
        uses: actions/checkout@v4
        with:
          repository: dotnet/runtime
          submodules: true
          ref: "v${{ inputs.version }}"
          path: "${{ github.workspace }}/dotnet/src/runtime"

      - name: Checkout ASP.NET Core repo
        uses: actions/checkout@v4
        with:
          repository: dotnet/aspnetcore
          submodules: true
          ref: "v${{ inputs.version }}"
          path: "${{ github.workspace }}/dotnet/src/aspnetcore"

      - name: Build .NET Runtime
        id: dotnet_runtime
        run: |-
          export TMP_DOTNET_VERSION_FULL=${{ inputs.version }}
          export TMP_DOTNET_VERSION_SHORT="${TMP_DOTNET_VERSION_FULL:0:3}"
          echo "dotnet_sdk_version=${TMP_DOTNET_VERSION_SHORT}" >> "$GITHUB_OUTPUT"
          chmod +x ./build.sh

          docker run -i --rm \
            --env ROOTFS_DIR="/crossfs/${{ env.RUNTIME_ARCH }}" \
            --mount type=bind,src="${{ github.workspace }}/dotnet",dst=/dotnet \
            --workdir /dotnet/src/runtime \
            --network=host \
            --entrypoint="./build.sh" \
            ${DOCKER_IMAGE_TO_USE} \
            --subset mono+libs+host+packs --cross --os ${RUNTIME_OS} --arch ${RUNTIME_ARCH} \
            --configuration ${RUNTIME_CONFIGURATION}
        working-directory: "${{ github.workspace }}/dotnet/src/runtime"

      - name: Upload .NET Runtime NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: "nuget-packages-${{ env.RUNTIME_ARCH }}-runtime"
          path: dotnet/src/runtime/artifacts/packages/${{ env.RUNTIME_CONFIGURATION }}/Shipping/*.nupkg
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

      - name: Upload .NET Runtime archives
        uses: actions/upload-artifact@v4
        with:
          name: "archives-${{ env.RUNTIME_ARCH }}-runtime"
          path: dotnet/src/runtime/artifacts/packages/${{ env.RUNTIME_CONFIGURATION }}/Shipping/*.tar.gz
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

      - name: Build ASP.NET Core
        run: |-
          chmod +x ./eng/build.sh

          docker run -i --rm \
            --env ROOTFS_DIR="/crossfs/${{ env.RUNTIME_ARCH }}" \
            --mount type=bind,src="${{ github.workspace }}/dotnet",dst=/dotnet \
            --workdir /dotnet/src/aspnetcore \
            --network=host \
            --entrypoint="./eng/build.sh" \
            ${DOCKER_IMAGE_TO_USE} \
            --os-name ${RUNTIME_OS} --arch ${RUNTIME_ARCH} --configuration ${RUNTIME_CONFIGURATION} \
            --pack --all --no-build-java --no-build-installers /p:OnlyPackPlatformSpecificPackages=true \
            /p:SkipTestBuild=true /p:PostBuildSign=true \
            /p:UrisToDownload="file:///dotnet/src/runtime/artifacts/packages/${{ env.RUNTIME_CONFIGURATION }}/Shipping/dotnet-runtime-${{ inputs.version }}-${{ env.RUNTIME_ARCH }}.tar.gz;"
        working-directory: "${{ github.workspace }}/dotnet/src/aspnetcore"

      - name: Upload ASP.NET NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: "nuget-packages-${{ env.RUNTIME_ARCH }}-aspnet"
          path: dotnet/src/aspnetcore/artifacts/packages/${{ env.RUNTIME_CONFIGURATION }}/Shipping/*.nupkg
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

      - name: Upload ASP.NET archives
        uses: actions/upload-artifact@v4
        with:
          name: "archives-${{ env.RUNTIME_ARCH }}-aspnet"
          path: dotnet/src/aspnetcore/artifacts/installers/${{ env.RUNTIME_CONFIGURATION }}/*.tar.gz
          retention-days: ${{ startsWith(github.ref, 'refs/heads/releases/') && 30 || 7 }}

  test:
    name: "Test"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout .NET repo
        uses: actions/checkout@v4

      - id: qemu
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
  
      - id: setup_buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nuget-packages-${{ env.RUNTIME_ARCH }}-*
          merge-multiple: true
          path: ${{ github.workspace }}/nuget-packages
      
      - name: Build and Run tests
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ env.PLATFORMS_TO_BUILD }}
          provenance: false
          context: "${{ github.workspace }}"
          file: "${{ github.workspace }}/tests/${{ needs.build.outputs.dotnet_sdk_version }}/simple/Dockerfile"
          push: false
          builder: ${{ steps.setup_buildx.outputs.name }}
          build-args: |
            RUNTIME_FRAMEWORK_VERSION=${{ inputs.version }}
            DOTNET_SDK_VERSION=${{ needs.build.outputs.dotnet_sdk_version }}
